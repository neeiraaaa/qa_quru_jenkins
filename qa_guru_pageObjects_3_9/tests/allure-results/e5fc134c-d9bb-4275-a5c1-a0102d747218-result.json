{"name": "Successful fill form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55873fec8013 <unknown>\n#1 0x55873fc2a89f <unknown>\n#2 0x55873fc53a1b <unknown>\n#3 0x55873fc7e8ac <unknown>\n#4 0x55873fc7c591 <unknown>\n#5 0x55873fc7bdc7 <unknown>\n#6 0x55873fc01c54 <unknown>\n#7 0x55873fc02aa0 <unknown>\n#8 0x55873fef5e5d <unknown>\n#9 0x55873ff0f061 <unknown>\n#10 0x55873fef7bb5 <unknown>\n#11 0x55873ff0fe08 <unknown>\n#12 0x55873feeb2f0 <unknown>\n#13 0x55873fc017d2 <unknown>\n#14 0x7fd9a6d080b3 <unknown>", "trace": "self = <allure_commons._allure.fixture object at 0x104b81b10>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n../../venv/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:39: in open_browser\n    attach.add_html(browser)\n../demoqa_tests/utils/attach.py:16: in add_html\n    html = browser.driver.page_source\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:539: in page_source\n    return self.execute(Command.GET_PAGE_SOURCE)['value']\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104b72c10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x558...\\\\n#12 0x55873feeb2f0 \\\\u003Cunknown>\\\\n#13 0x55873fc017d2 \\\\u003Cunknown>\\\\n#14 0x7fd9a6d080b3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55873fec8013 <unknown>\nE       #1 0x55873fc2a89f <unknown>\nE       #2 0x55873fc53a1b <unknown>\nE       #3 0x55873fc7e8ac <unknown>\nE       #4 0x55873fc7c591 <unknown>\nE       #5 0x55873fc7bdc7 <unknown>\nE       #6 0x55873fc01c54 <unknown>\nE       #7 0x55873fc02aa0 <unknown>\nE       #8 0x55873fef5e5d <unknown>\nE       #9 0x55873ff0f061 <unknown>\nE       #10 0x55873fef7bb5 <unknown>\nE       #11 0x55873ff0fe08 <unknown>\nE       #12 0x55873feeb2f0 <unknown>\nE       #13 0x55873fc017d2 <unknown>\nE       #14 0x7fd9a6d080b3 <unknown>\n\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidSessionIdException"}, "steps": [{"name": "submit_form", "status": "passed", "start": 1674207898858, "stop": 1674207914484}, {"name": "validate_form", "status": "passed", "start": 1674207914484, "stop": 1674207915831}], "start": 1674207898858, "stop": 1674207915832, "uuid": "957b26c4-0aae-4c78-83e1-ffa347eb06eb", "historyId": "d5f7d69c9f57ed6fb9c0eb43db5ebf61", "testCaseId": "4681c8e0e0098d55c7a5351bc04e672c", "fullName": "qa_guru_pageObjects_3_9.tests.practice_form_test#test_submitting_form", "labels": [{"name": "tag", "value": "web"}, {"name": "severity", "value": "critical"}, {"name": "owner", "value": "rogova_irina"}, {"name": "feature", "value": "Successful fill form"}, {"name": "parentSuite", "value": "qa_guru_pageObjects_3_9.tests"}, {"name": "suite", "value": "practice_form_test"}, {"name": "host", "value": "MacBook-Pro-Irina.local"}, {"name": "thread", "value": "38152-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "qa_guru_pageObjects_3_9.tests.practice_form_test"}]}